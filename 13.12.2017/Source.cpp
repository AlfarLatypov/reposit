#include <iostream>
#include <typeinfo>
using namespace  std;

/*Приведение типов
Qt
Будучи на конференции Qt Developer Days 2010 я узнал, что одним из самых популярных вопросов на собеседовании в 
разные зарубежные компании, работающие с Qt библиотекой, является вопрос о различиях в способах приведения типов в C++. 
Поэтому здесь я рассмотрю основные различия между static_cast, dynamic_cast, const_cast, reinterpret_cast, C-style cast,
qobject_cast и qvariant_cast


1. static_cast.

Синтаксис: 
TYPE static_cast<TYPE> (object);


static_cast преобразует выражения одного статического типа в объекты и значения другого статического типа. 
Поддерживается преобразование численных типов, указателей и ссылок по иерархии наследования как вверх, так и вниз. 
Проверка производится на уровне компиляции, так что в случае ошибки сообщение будет получено в момент сборки 
приложения или библиотеки.

2. dynamic_cast

Синтаксис:
TYPE& dynamic_cast<TYPE&> (object);
TYPE* dynamic_cast<TYPE*> (object);


Используется для динамического приведения типов во время выполнения. 
В случае неправильного приведения типов для ссылок вызывается исключительная ситуация std::bad_cast, 
а для указателей будет возвращен 0. Использует систему RTTI (Runtime Type Information). 
Безопасное приведение типов по иерархии наследования, в том числе для виртуального наследования. 

3. const_cast.

Синтаксис:
TYPE const_cast<TYPE> (object);


Пожалуй самое простое приведение типов. Снимает cv qualifiers — const и volatile, то есть константность и отказ 
от оптимизации компилятором переменной. Это преобразование проверяется на уровне компиляции и в случае ошибки приведения
типов будет выдано сообщение.

4. reinterpret_cast

Синтаксис:
TYPE reinterpret_cast<TYPE> (object);


Приведение типов без проверки. reinterpret_cast — непосредственное указание компилятору. 
Применяется только в случае полной уверенности программиста в собственных действиях. 
Не снимает константность и volatile. применяется для приведения указателя к указателю, указателя к целому и наоборот.

5. C-style cast

Синтаксис:
TYPE (TYPE*) object;


Си-шный метод приведения типов. Пожалуй самый нежелательный способ приведения типов. Страуструп пишет: 
«Например, что это значит выражение — x = (T)y;. Мы не знаем. Это зависит от типа T, типов x и y. 
T может быть названием типа, typedef или может быть параметр template-а. Может быть, х и у 
являются скалярными переменными и Т представляет собой значение преобразования. Может быть, х объекта класса, 
производного от класса Y и Т — нисходящее преобразование. По этой причине программист может не знать, 
что он делает на самом деле.» 
Вторая причина нежелательного использования приведения типов в C-style — т
рудоемкость процесса поиска мест приведения типов.

6. qobject_cast

Синтаксис:
TYPE qobject_cast<TYPE>(QObject *object)


Приводит объект QObject* к типу TYPE если объект типа объекта TYPE или тип наследует от TYPE иначе возвращает 0. 
qobject_cast от 0 также дает 0. Необходимое условие. Класс должен наследовать от QObject и содержать 
в себе макрос Q_OBJECT. Функция ведет себя аналогично стандартному dynamic_cast, но при этом не использует RTTI. 
Вот как описана данная функция в Qt 4.7.0:

template <class T>
inline T qobject_cast(QObject *object)
{
#if !defined(QT_NO_MEMBER_TEMPLATES) && !defined(QT_NO_QOBJECT_CHECK)
  reinterpret_cast<T>(0)->qt_check_for_QOBJECT_macro(*reinterpret_cast<T>(object));
#endif
  return static_cast<T>(reinterpret_cast<T>(0)->staticMetaObject.cast(object));
}
* This source code was highlighted with Source Code Highlighter.


Итак, что тут происходит: 

Во-первых если не определены QT_NO_MEMBER_TEMPLATES (определяется только в том случае, 
если используется версия Microsoft Visual Studio ниже 2002) и QT_NO_QOBJECT_CHECK 
(определяется в случае использования версии Microsoft Visual Studio ниже 2003), 
то происходит проверка наличия макроса Q_OBJECT в объявлении класса. И после этого 
выполняется непосредственно само преобразование — сначала получаем статический объект 
класса QMetaObject, который называется staticMetaObject, у которого вызывается метод cast, 
который возвращает const_cast переданного ему объекта, попутно проверяя наследуется ли данный 
объект от QObject. Далее полученному объекту делается static_cast и возвращается результат.

7. qvariant_cast

Синтаксис:
TYPE qvariant_cast<TYPE>(const QVariant &value)


Приводит объект класса QVariant к нужному классу.
Функция аналогична функции qVariantValue.

Рассмотрим, что происходит внутри:

template<typename T> inline T qvariant_cast(const QVariant &v)
{
  const int vid = qMetaTypeId<T>(static_cast<T *>(0));
  if (vid == v.userType())
    return *reinterpret_cast<const T *>(v.constData());
  if (vid < int(QMetaType::User)) {
    T t;
    if (qvariant_cast_helper(v, QVariant::Type(vid), &t))
      return t;
  }
  return T();
}
* This source code was highlighted with Source Code Highlighter.


В первой секции кода производится получение идентификатора класса через метасистему Qt.
В том случае если класс не зарегистрирован через Q_DECLARE_METATYPE, компиляция кода с приведением 
к этому типу выдаст ошибку. Далее, если тип объекта, полученный от метасистемы совпадает с типом в 
значении QVariant, производится reinterpret_cast содержимого объекта, если идентификатор класса не 
является встроенным типом и его id не совпадает с заложенным в значении QVariant, то возвращается TYPE().
Для случаев, когда мы приводим к встроенному типу, вызывается функция qvariant_cast_helper, которая вызывает
в свою очередь функцию convert, адрес которой хранится в структуре Handler. В ней уже осуществляется 
приведение способом подходящим для типа TYPE. Если конвертация не удалась возвращается объект TYPE()

UPD: C-style cast по сути самое медленное преобразование, так как в этом случае последовательно 
перебираются следующие вызовы:
const_cast
static_cast
static_cast + const_cast
reinterpret_cast
reinterpret_cast + const_cast


UPD: Спасибо BaJlepa:
1. const_cast также умеет добавлять cv-квалификаторы
2. для преобразования указателей лучше использовать двойной static_cast через void* вместо 
reinterpret_cast, потому как такое преобразование позволяет быть уверенным в том, что только 
pointer-ы участвуют в приведении*/

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//RTTI - Run-Time Type Information
/*Динамическая идентификация типа данных(англ.run - time type information, run - time type identification, RTTI) —
механизм в некоторых языках программирования, который позволяет определить тип данных переменной или объекта во
время выполнения программы.*/

/*
В C++ для динамической идентификации типов[1] применяются операторы dynamic_cast и typeid
(определён в файле typeinfo.h), для использования которых информацию о типах во время выполнения
обычно необходимо добавить через опции компилятора при компиляции модуля.

Оператор dynamic_cast пытается выполнить приведение к указанному типу с проверкой.
Целевой тип операции должен быть типом указателя, ссылки или void*.
Если целевой тип — тип указателя, то аргументом должен быть указатель на объект класса.
Если целевой тип — ссылка, то аргумент должен также быть соответствующей ссылкой.
Если целевым типом является void*, то аргумент также должен быть указателем,
а результатом операции будет указатель, с помощью которого можно обратиться к любому элементу «самого производного»
класса иерархии, который сам не может быть базовым ни для какого другого класса.

Оператор typeid[2] возвращает ссылку на структуру type_info, которая содержит поля,
позволяющие получить информацию о типе.*/


//оператор typeid -это шаблонный класс для проверки типов переменных, создан для определения типов

class A {   //для примера 2 и 3
public:
	A() {}
	virtual ~A() {}
};

class B :public A {//для примера 2 и 3
public:
	B() {}
	~B() {}
};

//void main() { //пример 1
//	auto x = 5.5;
//	cout <<"\n\t\t"<< typeid(x).name() << endl << endl << endl;
//}


//void main() { //пример 2
//	A a;
//	B b;
//	cout << "\n\t\t   " << typeid(a).before(typeid(b)); //возвращает 1 - значит b типа А (1 или 0)
//	cout << "\n\t\t" << typeid(b).name(); //возвращает имя класса - class B
//	cout << "\n\t\t" << typeid(a).name() << endl << endl << endl; //возвращает имя класса - class A
//}



//void main() { //пример 3 dynamic_cast (Оператор dynamic_cast пытается выполнить приведение к указанному типу с проверкой.)
//	A *a = new B();
//	B *b = dynamic_cast<B*>(new A()); //базовый класс заставили взять тип дочернего
//
//	delete a;
//	delete b;
//}



/*static_cast < type > ( object )
static_cast создан для выполнения всех видов преобразований, разрешенных компилятором[2].
Оператор static_cast может использоваться для следующих преобразований:
приведение указателя базового класса к указателю производного класса (без проверок типа во время выполнения);
преобразование численного типа enums в int или int в float и наоборот;
преобразования с изменением разрядности (например, из int в char) и с изменением знака (например, из signed short int в unsigned int);
явный вызов метода класса, выполняющего преобразование класса к значению нужного типа.

Преобразования, выполняемые с помощью static_cast, небезопасны, так как проверка типов
выполняется только на этапе компиляции; во время выполнения могут преобразовываться
значения несовместимых типов.*/


//void main() { //пример 4 static_cast 
//
//	double y = 5.5;
//	int x = static_cast<int>(y); //переводит дабл в инт или наоборот, может любой тип преобразовать
//	cout << x << endl;
//
//}
//



/*const_cast.

Синтаксис:
TYPE const_cast<TYPE> (object);
Пожалуй самое простое приведение типов. Снимает cv qualifiers — const и volatile, 
то есть константность и отказ от оптимизации компилятором переменной. 
Это преобразование проверяется на уровне компиляции и в случае ошибки 
приведения типов будет выдано сообщение.*/

//void main() { //пример 5 const_cast
//
//	const double pi = 3.14;
//	double *w = const_cast<double*>(&pi);
//	cout << *w << endl;
//  delete w;
//}

//class Temp {
//	int x;
//public:
//	int getX() const {
//		return x;
//	}
//	int setX(int x) const {
//		const_cast<Temp *>(this)->x = x; //убрали константность
//		cout << x << endl;
//	}
//};
//
//void main() { 
//
//	const double  q = 5.5;
//	//const_cast<double &>(q) = 4;
//
//	cout << q << endl;
//}
//




/* reinterpret_cast
Синтаксис:
TYPE reinterpret_cast<TYPE> (object);
Приведение типов без проверки. 
reinterpret_cast — непосредственное указание компилятору.
Применяется только в случае полной уверенности программиста в собственных действиях.
Не снимает константность и volatile.
применяется для приведения указателя к указателю, указателя к целому и наоборот.*/




//
//void main() { //пример 6 reinterpret_cast
//
//	unsigned p = 5;
//	unsigned *u = &p;
//	int *i;
//	i = reinterpret_cast<int *>(u); 
//	
//	cout << *i << endl;
//}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*Поток данных (англ. stream) в программировании — абстракция, используемая для чтения или записи файлов, 
сокетов и т. п. в единой манере.
Потоки являются удобным унифицированным программным интерфейсом для чтения или записи файлов 
(в том числе специальных и, в частности, связанных с устройствами), сокетов и передачи данных между процессами.
Поддержка потоков включена в большинство языков программирования и едва ли не во все современные (на 2008 год) 
операционные системы.
При запуске процесса ему предоставляются предопределённые стандартные потоки.
Возможность перенаправления потоков позволяет связывать различные программы, и придаёт системе гибкость, 
являющуюся частью философии Unix.*/


/*Абстракция потока особенно важна в языке программирования Си, 
где он представляет собой источник ввода и/или вывода данных, обычно байтов, связанный с файлом,.
устройством, либо другим процессом. Работа с потоками перенесена во многие другие языки:
C++: iostream из стандартной библиотеки C++.
Языки платформы .NET Framework (например, C#): Base Class Library, пространство имен System.IO.
В языках платформы Java потоки данных реализованы в пакете java.io.*/


/*
1) MPI - стандарт, работает с процессорами
2) CUDA - работает в видеокартах, берет задачу, параллелит и запускает 
3) multithreading - Временна́я многопоточность (англ. Temporal multithreading) — одна из двух 
главных форм многопоточности, которая может быть реализована в процессорах аппаратно. 
Второй формой является одновременная многопоточность. hyperV - технология.
4)
- Async - несинхрон исполнение
- Parallel (Mapreduce - технология)
- Concurrency - Tермин Concurrency будет переводиться «одновременность», а термин Parallelism будет 
переводиться «параллелизм».Одновременное программирование включает в себя языки программирования и алгоритмы,
используемые для реализации одновременных систем. Одновременное программирование обычно считается более 
общим понятием, чем параллельное программирование, поскольку оно может включать произвольные динамические 
модели общения и взаимодействия, тогда как параллельные системы чаще всего реализуют заранее определённые 
и хорошо структурированные модели связей. Основными целями одновременного программирования являются 
корректность, эффективность, устойчивость. Одновременные системы, такие как операционные системы и 
системы управления базами данных предназначены прежде всего для работы в неопределённых условиях, 
в том числе с учётом автоматического восстановления после сбоя, они не должны неожиданно прекращать работу. 
Некоторые одновременные системы осуществляют работу в виде прозрачной одновременности, при которой 
одновременные вычислительные сущности могут конкурировать за использование одного и того же ресурса,
но суть этой конкуренции скрыта для программиста.
Поскольку одновременные системы используют общие ресурсы, они обычно требуют наличие какого-либо арбитра, 
встроенного в их реализацию (часто в базовое оборудование) для управления доступом к этим ресурсам. 
Использование арбитров создаёт вероятность неопределённости в одновременных вычислениях, которая имеет 
большое значение для практики, в том числе для обеспечения корректности и эффективности. 
Например, арбитраж не исключает неограниченный индетерминизм, который связан с проблемой проверки моделей, 
являющейся причиной взрывного характера пространства состояний и может даже стать причиной образования модели
с бесконечным числом состояний.
Некоторые одновременные модели программирования включают создание сопроцессов и детерминированной одновременности. 
В этих моделях потоки выполнения по управлению процессами явно отдают своё кванты времени либо системе, 
либо другому процессу.

Ме́тод Мо́нте-Ка́рло (методы Монте-Карло, ММК) — общее название группы численных методов, 
основанных на получении большого числа реализаций стохастического (случайного) процесса, 
который формируется таким образом, чтобы его вероятностные характеристики совпадали с 
аналогичными величинами решаемой задачи. 
Используется для решения задач в различных областях физики, химии, математики, экономики, 
оптимизации, теории управления и др.

https://habrahabr.ru/post/313996/

*/





